{"version":3,"sources":["components/App.styled.jsx","redux/contacts/contacts-slice.js","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/App.jsx","redux/store.js","index.js"],"names":["Container","styled","div","Input","button","input","ContactStyledList","ul","P","p","DeleteButton","contactApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getAllContacts","query","providesTags","addContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","deleteId","useGetAllContactsQuery","useAddContactMutation","useDeleteContactMutation","Form","useState","name","setName","number","setNumber","isLoading","data","handleChange","event","target","value","reset","onSubmit","preventDefault","find","contact","alert","onChange","type","pattern","title","required","Filter","ContactListItem","isDeleting","onClick","id","ContactList","contacts","deleting","map","App","filter","setFilter","console","log","normalizedFilter","toLowerCase","includes","findContact","currentTarget","store","configureStore","reducer","middleware","getDefaultMiddleware","setupListeners","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1da7377.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\nexport const Container = styled.div`\r\npadding:50px\r\n`;\r\nexport const Button = styled.button`\r\nmargin: 20px;\r\npadding: 10px;\r\npadding-right:20px;\r\npadding-left: 20px;\r\n`;\r\nexport const Input = styled.input`\r\nmargin-left:10px\r\n`;\r\nexport const ContactStyledList = styled.ul`\r\npadding-inline-start:0px;\r\nlist-style-type: none;`\r\n\r\nexport const P = styled.p`\r\nfont-size: 20px;\r\ndisplay:inline-block;\r\nmargin:0px;`\r\nexport const DeleteButton = styled.button`\r\nmargin-left:10px;\r\nbackground-color:black;\r\ncolor:white;\r\nborder:0px;\r\ncursor:pointer;\r\n`","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const contactApi = createApi({\r\n  reducerPath: 'contactApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://616b18a516e7120017fa1214.mockapi.io/api/v1/' }),\r\n  tagTypes: ['Contacts'],\r\n  endpoints: (builder) => ({\r\n    getAllContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: ['Contacts']\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: (newContact) => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: ['Contacts']\r\n  }),\r\n      deleteContact: builder.mutation({\r\n      query: (deleteId) => ({\r\n        url: `/contacts/${deleteId}`,\r\n        method: 'DELETE',\r\n        }),\r\n        invalidatesTags: ['Contacts']\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const {\r\n  useGetAllContactsQuery,\r\n  useAddContactMutation,\r\n  useDeleteContactMutation\r\n} = contactApi","import React, { useState  } from 'react';\r\nimport {Input} from '../App.styled.jsx';\r\nimport { useAddContactMutation } from '../../redux/contacts/contacts-slice';\r\nimport { useGetAllContactsQuery } from '../../redux/contacts/contacts-slice';\r\n\r\nconst  Form = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [addContact, { isLoading },] = useAddContactMutation()\r\n  const { data } = useGetAllContactsQuery()\r\n  \r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n  const isNameExist = data.find(contact => contact.name === name);\r\n        if (isNameExist) {\r\n          alert(`${name}is already in contacts`);\r\n          reset()\r\n          return\r\n      }\r\n    addContact({name, number})\r\n    reset()\r\n  }\r\n\r\n  const reset = () => {\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n    \r\n  return (<form onSubmit={handleSubmit}>\r\n    <lable> Name\r\n      <Input\r\n        value={name}\r\n        onChange={handleChange}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. \r\n        Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required />\r\n    </lable>\r\n    <lable> Number\r\n      <Input\r\n        value={number}\r\n        onChange={handleChange}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, \r\n        круглые скобки и может начинаться с +\" required />\r\n    </lable>\r\n    <button type=\"submit\">{isLoading? 'Adding..' :'Add contact'}</button>\r\n  </form>)\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\n const Filter = ({ value, onChange }) => (\r\n  <label>\r\n    <h3>Find contact by Name</h3>\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nexport default Filter;","import React from 'react';\r\nimport { P, DeleteButton } from '../App.styled.jsx';\r\nimport { useDeleteContactMutation } from '../../redux/contacts/contacts-slice'\r\n\r\nconst ContactListItem = ({contact }) => {\r\n    const [deleteContact, { isLoading: isDeleting },] = useDeleteContactMutation()\r\n    return (\r\n    <li key={contact.id}>\r\n             <P>{contact.name}:</P> <P>{contact.number}</P>\r\n        <DeleteButton\r\n          type=\"button\"\r\n          onClick={() => deleteContact(contact.id)}> {isDeleting ? 'Deleting...': 'Delete'}\r\n        </DeleteButton>\r\n      </li>\r\n    )\r\n    };\r\n\r\nexport default ContactListItem;","import React from 'react';\r\nimport { ContactStyledList } from '../App.styled.jsx';\r\nimport ContactListItem from './ContactListItem'\r\n\r\nconst ContactList = ({ contacts, deleteContact, deleting }) => (\r\n  <ContactStyledList>\r\n    {contacts.map((contact) => (\r\n      <ContactListItem key={contact.id} contact={contact}/>\r\n    ))}\r\n  </ContactStyledList>\r\n);\r\n\r\nexport default ContactList;","import React, { useState  } from 'react'\nimport { Container} from './App.styled.jsx';\nimport Form  from './Form/Form';\nimport Filter  from './Filter/Filter';\nimport ContactList from './ContactList/ContactList';\nimport { useGetAllContactsQuery } from '../redux/contacts/contacts-slice'\n\nexport default function App() {\n  const [filter, setFilter] = useState('');\n  const { data } = useGetAllContactsQuery()\n \nconst changeFilter = event => {\n    setFilter(event.currentTarget.value);\n};\nconst findContact = () => {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = data.filter(contacts =>\n      contacts.name.toLowerCase().includes(normalizedFilter),\n    );\n    return filteredContacts\n  };\n  console.log(Filter.filter)\n  return (\n  \n      <Container >\n        <h2>PhoneBook</h2>\n        <Form/>\n        <h2>Contacts</h2>\n        {data && <ContactList contacts={findContact()} />}\n        <Filter value={filter}\n        onChange={changeFilter} />\n      </Container>\n    )\n}\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport {setupListeners } from '@reduxjs/toolkit/dist/query';\r\nimport {contactApi} from './contacts/contacts-slice'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n    [contactApi.reducerPath]: contactApi.reducer,\r\n},\r\n    middleware: (getDefaultMiddleware) => [\r\n        ...getDefaultMiddleware(),\r\n        contactApi.middleware,\r\n    ],\r\n});\r\n\r\nsetupListeners(store.dispatch)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport {store} from './redux/store.js'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}